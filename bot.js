const TelegramBot = require('node-telegram-bot-api');
const fs = require('fs');

// replace the value below with the Telegram token you receive from @BotFather
const token = '7969158574:AAEe1btSBENJVYRCJciEVcSEbKQWDPuq5gk';

// Create a bot that uses 'polling' to fetch new updates
const bot = new TelegramBot(token, {polling: true});


const TASKS_FILE = 'tasks.json';

// X√≥a task ƒë√£ ho√†n th√†nh
bot.onText(/^Done: (.+)/i, (msg, match) => {
    console.log("Received Delete Task command:", match[1]); // Debug log
    const task = match[1].trim();
    const index = tasks.indexOf(task);
    if (index !== -1) {
        tasks.splice(index, 1);
        saveTasks();  // C·∫≠p nh·∫≠t file
        bot.sendMessage(msg.chat.id, `‚úÖ ƒê√£ ho√†n th√†nh task: *${task}*`, { parse_mode: 'Markdown' });
    } else {
        bot.sendMessage(msg.chat.id, `‚ö† Task *${task}* kh√¥ng t·ªìn t·∫°i!`, { parse_mode: 'Markdown' });
    }
});

// Xem danh s√°ch task
bot.onText(/\/tasks/, (msg) => {
    if (tasks.length === 0) {
        bot.sendMessage(msg.chat.id, `üéâ Kh√¥ng c√≥ task n√†o c·∫ßn l√†m!`);
    } else {
        const taskList = tasks.map((task, index) => `üìå *${index + 1}. ${task}*`).join("\n");
        bot.sendMessage(msg.chat.id, `üìù Danh s√°ch task c√≤n l·∫°i:\n${taskList}`, { parse_mode: 'Markdown' });
    }
});

*/
// ƒê·ªçc danh s√°ch task t·ª´ file JSON
let tasks = [];
if (fs.existsSync(TASKS_FILE)) {
    tasks = JSON.parse(fs.readFileSync(TASKS_FILE, 'utf8'));
}

// H√†m l∆∞u task v√†o file JSON
function saveTasks() {
    fs.writeFileSync(TASKS_FILE, JSON.stringify(tasks, null, 2));
}

// üéØ Th√™m Task: Task: [Android/iOS/Web/BE] N·ªôi dung task
bot.onText(/^Task: (Android|iOS|Web|BE) (.+)/i, (msg, match) => {
    const platform = match[1].trim();
    const content = match[2].trim();
    const newTask = {
        id: tasks.length > 0 ? tasks[tasks.length - 1].id + 1 : 1, // ID tƒÉng d·∫ßn
        platform,
        content
    };
    tasks.push(newTask);
    saveTasks();
    bot.sendMessage(msg.chat.id, `‚úÖ ƒê√£ th√™m task [${platform}]: *${content}* (ID: ${newTask.id})`, { parse_mode: 'Markdown' });
});

// üéØ X√≥a Task: Done: ID
bot.onText(/^Done: (\d+)/i, (msg, match) => {
    const taskId = parseInt(match[1]);
    const taskIndex = tasks.findIndex(t => t.id === taskId);

    if (taskIndex !== -1) {
        const removedTask = tasks.splice(taskIndex, 1)[0];
        saveTasks();
        bot.sendMessage(msg.chat.id, `‚úÖ ƒê√£ xo√° task [${removedTask.platform}]: *${removedTask.content}* (ID: ${taskId})`, { parse_mode: 'Markdown' });
    } else {
        bot.sendMessage(msg.chat.id, `‚ö† Kh√¥ng t√¨m th·∫•y task c√≥ ID: ${taskId}`);
    }
});

// üéØ Danh s√°ch Task c√≤n l·∫°i
bot.onText(/^\/task(s)?/i, (msg) => {
    if (tasks.length === 0) {
        bot.sendMessage(msg.chat.id, "üì≠ Kh√¥ng c√≥ task n√†o trong danh s√°ch.");
    } else {
        let taskList = tasks.map(t => `${t.id} - ${t.platform}: ${t.content}`).join("\n");
        bot.sendMessage(msg.chat.id, `üìå *Danh s√°ch Task c√≤n l·∫°i:*\n${taskList}`, { parse_mode: 'Markdown' });
    }
});

// üéØ L·ªçc danh s√°ch Task theo n·ªÅn t·∫£ng: "Task Android", "Task iOS", "Task Web", "Task BE"
bot.onText(/^\/(Android|iOS|Web|BE)/i, (msg, match) => {
  const platform = match[1].trim();
  const filteredTasks = tasks.filter(t => t.platform.toLowerCase() === platform.toLowerCase());

  if (filteredTasks.length === 0) {
      bot.sendMessage(msg.chat.id, `üì≠ Kh√¥ng c√≥ task n√†o thu·ªôc *${platform}*.`);
  } else {
      let taskList = filteredTasks.map(t => `${t.id} - ${t.content}`).join("\n");
      bot.sendMessage(msg.chat.id, `üìå *Danh s√°ch Task ${platform}:*\n${taskList}`, { parse_mode: 'Markdown' });
  }
});

// üéØ H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng bot
bot.onText(/^\/help/, (msg) => {
  const helpMessage = `
ü§ñ *H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng Bot Task Manager*:

‚úÖ *Th√™m Task*  
_G·ª≠i:_  
\`Task: [Android|iOS|Web|BE] N·ªôi dung task\`  
_V√≠ d·ª•:_  
\`Task: Android Fix l·ªói login\`  

‚úÖ *X√≥a Task*  
_G·ª≠i:_  
\`Done: [ID task]\`  
_V√≠ d·ª•:_  
\`Done: 3\`  

‚úÖ *Xem danh s√°ch Task c√≤n l·∫°i*  
\`/tasks\`  

‚úÖ *Xem Task theo n·ªÅn t·∫£ng*  
\`/Android\` ‚Äì Xem danh s√°ch Task Android  
\`/iOS\` ‚Äì Xem danh s√°ch Task iOS  
\`/Web\` ‚Äì Xem danh s√°ch Task Web  
\`/BE\` ‚Äì Xem danh s√°ch Task Backend  

üìå *Li√™n h·ªá Admin n·∫øu c·∫ßn th√™m t√≠nh nƒÉng!* üöÄ  
  `;
  bot.sendMessage(msg.chat.id, helpMessage, { parse_mode: 'Markdown' });
});

const schedule = require('node-schedule');

// üéØ H√†m g·ª≠i b√°o c√°o l·ªói h·∫±ng ng√†y v√†o 9h s√°ng (UTC+7)
const sendDailyBugReport = () => {
    if (tasks.length === 0) {
        bot.sendMessage(CHAT_ID, "üì≠ Kh√¥ng c√≥ l·ªói n√†o trong h·ªá th·ªëng h√¥m nay.");
        return;
    }

    let platforms = ["Android", "iOS", "Web", "BE"];
    let report = "üì¢ *B√°o c√°o Bug h√†ng ng√†y:*\n\n";

    platforms.forEach(platform => {
        let platformBugs = tasks.filter(task => task.platform.toLowerCase() === platform.toLowerCase());

        if (platformBugs.length > 0) {
            report += `*${platform}:*\n`;
            platformBugs.forEach(task => {
                report += `+ ${task.id} - ${task.content}\n`;
            });
            report += "\n";
        }
    });

    bot.sendMessage(CHAT_ID, report, { parse_mode: "Markdown" });
};

// ‚è∞ L√™n l·ªãch g·ª≠i b√°o c√°o l·ªói v√†o 9h s√°ng (UTC+7)
schedule.scheduleJob({ hour: 11, minute: 30 }, sendDailyBugReport);


